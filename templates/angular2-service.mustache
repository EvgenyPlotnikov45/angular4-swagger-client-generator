import { Injectable } from "@angular/core";
import { HttpHeaders, HttpParams } from "@angular/common/http";
import { DataContextService } from "./data-context.service";
import { Observable } from "rxjs";

import {
{{#definitions}}
{{#hasEnums}}
{{#enums}}
  {{name}},
{{/enums}}
{{/hasEnums}}
  {{name}}{{^isLast}},{{/isLast}}
{{/definitions}}
} from "../models";

{{#enums}}
export enum {{name}} {
  {{#values}}
  {{#upper}}{{value}}{{/upper}} = "{{value}}"{{^isLast}},{{/isLast}}
  {{/values}}
}

{{/enums}}
/**
* Created with angular4-swagger-client-generator.
*/
@Injectable()
export class PassportApiService {

  constructor(private dataContext: DataContextService) {}

{{#methods}}
  /**
  {{#summaryLines}}
  * {{&.}}
  {{/summaryLines}}
  * Method {{&methodName}}
  {{#parameters}}
  {{^isSingleton}}* @param {{&camelCaseName}} {{&description}}{{/isSingleton}}
  {{/parameters}}
  * @return http response as Promise
  */
  public {{&methodName}}({{#parameters}}{{&camelCaseName}}: {{typescriptType}}{{^isLast}}, {{/isLast}}{{/parameters}}): Promise<any> {
    const uri = `{{&backTickPath}}`;
    const headers = new HttpHeaders();
    const params = new HttpParams();
    {{#parameters}}
      {{#isQueryParameter}}
        {{#isSingleton}}
    params.set("{{&name}}", "{{&singleton}}" + "");
        {{/isSingleton}}
        {{^isSingleton}}
          {{#isPatternType}}
    Object.keys(parameters).forEach(function(parameterName) {
      if (new RegExp("{{&pattern}}").test(parameterName)) {
        params.set(parameterName, parameters[parameterName] + "");
      }
    });
          {{/isPatternType}}
          {{^isPatternType}}
    if ({{&camelCaseName}} !== undefined && {{&camelCaseName}} !== null) {
          {{#isArray}}
      Object.keys({{&camelCaseName}}).map(value => {
        params.set("{{&name}}", value + "");
      });
          {{/isArray}}
          {{^isArray}}
      params.set("{{&name}}", {{&camelCaseName}} + "");
          {{/isArray}}
    }
          {{/isPatternType}}
        {{/isSingleton}}
      {{/isQueryParameter}}
      {{#isHeaderParameter}}
        {{#isSingleton}}
    headers.set("{{&name}}", "{{&singleton}}" + "");
        {{/isSingleton}}
        {{^isSingleton}}
    if ({{&camelCaseName}} !== undefined && {{&camelCaseName}} !== null) {
          {{#isArray}}
      Object.keys({{&camelCaseName}}).map(value => {
        headers.set("{{&name}}", value + "");
      });
          {{/isArray}}
          {{^isArray}}
      headers.set("{{&name}}", {{&camelCaseName}} + "");
          {{/isArray}}
    }
        {{/isSingleton}}
      {{/isHeaderParameter}}
    {{/parameters}}
    return this.sendRequest<{{&response}}>("{{angular2httpMethod}}", uri, headers, params, {{#hasBodyParameters}}{{#parameters}}{{#isBodyParameter}}{{&camelCaseName}}{{/isBodyParameter}}{{/parameters}}{{/hasBodyParameters}}{{^hasBodyParameters}}null{{/hasBodyParameters}});
  }

{{/methods}}
  private sendRequest<T>(method: string, uri: string, headers: HttpHeaders, params: HttpParams, body: any): Promise<T> {
        if (method === "get") {
          return this.dataContext.get<T>(uri, { headers, params: params }, true);
        } else if (method === "put") {
          return this.dataContext.put<T>(uri, body, { headers, params: params }, true);
        } else if (method === "post") {
          return this.dataContext.post<T>(uri, body, { headers: headers, params: params }, true);
        } else if (method === "delete") {
          return this.dataContext.delete<T>(uri, { headers: headers, params: params }, true);
        }
  }
}
